// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.0--rc3
// source: service/service.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NevernService_ListConnectionIds_FullMethodName = "/service.NevernService/ListConnectionIds"
	NevernService_TryReadOutputById_FullMethodName = "/service.NevernService/TryReadOutputById"
	NevernService_WriteInputById_FullMethodName    = "/service.NevernService/WriteInputById"
	NevernService_ForgetById_FullMethodName        = "/service.NevernService/ForgetById"
	NevernService_DisconnectById_FullMethodName    = "/service.NevernService/DisconnectById"
)

// NevernServiceClient is the client API for NevernService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NevernServiceClient interface {
	ListConnectionIds(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ConnectionData], error)
	TryReadOutputById(ctx context.Context, in *ConnectionId, opts ...grpc.CallOption) (*Output, error)
	WriteInputById(ctx context.Context, in *Input, opts ...grpc.CallOption) (*WriteInputByIdResponse, error)
	ForgetById(ctx context.Context, in *ConnectionId, opts ...grpc.CallOption) (*Empty, error)
	DisconnectById(ctx context.Context, in *ConnectionId, opts ...grpc.CallOption) (*Empty, error)
}

type nevernServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNevernServiceClient(cc grpc.ClientConnInterface) NevernServiceClient {
	return &nevernServiceClient{cc}
}

func (c *nevernServiceClient) ListConnectionIds(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ConnectionData], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NevernService_ServiceDesc.Streams[0], NevernService_ListConnectionIds_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, ConnectionData]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NevernService_ListConnectionIdsClient = grpc.ServerStreamingClient[ConnectionData]

func (c *nevernServiceClient) TryReadOutputById(ctx context.Context, in *ConnectionId, opts ...grpc.CallOption) (*Output, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Output)
	err := c.cc.Invoke(ctx, NevernService_TryReadOutputById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nevernServiceClient) WriteInputById(ctx context.Context, in *Input, opts ...grpc.CallOption) (*WriteInputByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteInputByIdResponse)
	err := c.cc.Invoke(ctx, NevernService_WriteInputById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nevernServiceClient) ForgetById(ctx context.Context, in *ConnectionId, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, NevernService_ForgetById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nevernServiceClient) DisconnectById(ctx context.Context, in *ConnectionId, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, NevernService_DisconnectById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NevernServiceServer is the server API for NevernService service.
// All implementations must embed UnimplementedNevernServiceServer
// for forward compatibility.
type NevernServiceServer interface {
	ListConnectionIds(*Empty, grpc.ServerStreamingServer[ConnectionData]) error
	TryReadOutputById(context.Context, *ConnectionId) (*Output, error)
	WriteInputById(context.Context, *Input) (*WriteInputByIdResponse, error)
	ForgetById(context.Context, *ConnectionId) (*Empty, error)
	DisconnectById(context.Context, *ConnectionId) (*Empty, error)
	mustEmbedUnimplementedNevernServiceServer()
}

// UnimplementedNevernServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNevernServiceServer struct{}

func (UnimplementedNevernServiceServer) ListConnectionIds(*Empty, grpc.ServerStreamingServer[ConnectionData]) error {
	return status.Errorf(codes.Unimplemented, "method ListConnectionIds not implemented")
}
func (UnimplementedNevernServiceServer) TryReadOutputById(context.Context, *ConnectionId) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TryReadOutputById not implemented")
}
func (UnimplementedNevernServiceServer) WriteInputById(context.Context, *Input) (*WriteInputByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteInputById not implemented")
}
func (UnimplementedNevernServiceServer) ForgetById(context.Context, *ConnectionId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgetById not implemented")
}
func (UnimplementedNevernServiceServer) DisconnectById(context.Context, *ConnectionId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectById not implemented")
}
func (UnimplementedNevernServiceServer) mustEmbedUnimplementedNevernServiceServer() {}
func (UnimplementedNevernServiceServer) testEmbeddedByValue()                       {}

// UnsafeNevernServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NevernServiceServer will
// result in compilation errors.
type UnsafeNevernServiceServer interface {
	mustEmbedUnimplementedNevernServiceServer()
}

func RegisterNevernServiceServer(s grpc.ServiceRegistrar, srv NevernServiceServer) {
	// If the following call pancis, it indicates UnimplementedNevernServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NevernService_ServiceDesc, srv)
}

func _NevernService_ListConnectionIds_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NevernServiceServer).ListConnectionIds(m, &grpc.GenericServerStream[Empty, ConnectionData]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NevernService_ListConnectionIdsServer = grpc.ServerStreamingServer[ConnectionData]

func _NevernService_TryReadOutputById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NevernServiceServer).TryReadOutputById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NevernService_TryReadOutputById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NevernServiceServer).TryReadOutputById(ctx, req.(*ConnectionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NevernService_WriteInputById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NevernServiceServer).WriteInputById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NevernService_WriteInputById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NevernServiceServer).WriteInputById(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _NevernService_ForgetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NevernServiceServer).ForgetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NevernService_ForgetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NevernServiceServer).ForgetById(ctx, req.(*ConnectionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NevernService_DisconnectById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NevernServiceServer).DisconnectById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NevernService_DisconnectById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NevernServiceServer).DisconnectById(ctx, req.(*ConnectionId))
	}
	return interceptor(ctx, in, info, handler)
}

// NevernService_ServiceDesc is the grpc.ServiceDesc for NevernService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NevernService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.NevernService",
	HandlerType: (*NevernServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TryReadOutputById",
			Handler:    _NevernService_TryReadOutputById_Handler,
		},
		{
			MethodName: "WriteInputById",
			Handler:    _NevernService_WriteInputById_Handler,
		},
		{
			MethodName: "ForgetById",
			Handler:    _NevernService_ForgetById_Handler,
		},
		{
			MethodName: "DisconnectById",
			Handler:    _NevernService_DisconnectById_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListConnectionIds",
			Handler:       _NevernService_ListConnectionIds_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service/service.proto",
}
